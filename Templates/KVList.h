#pragma once
//KVList Template
//template < class K, class V, size_t N>Error try typename instead of class sometimes

template <typename K, typename V, int N>

class KVList {

	size_t count;
	K k[N]; //K being the incoming type, and k being the name of the Key array
	V v[N];

	//std::pair<K, V> table[N]; to use pair function use
	//every return reference to k and v must be table[i].first or table[i].second instead if using pairs
	//input using std::make_pair(kk,vv); //Just a snippet of pair utility

public:

	KVList() : count(0) {
	} //- default constructor - adopts a safe empty state	

	size_t size() const {
		return count;
	}//- returns the number of entires in the key - value list

	const K& key(int i) const {

		if (i >= 0 && i < N) { return k[i]; } //previously i <= 0
	}// - returns an unmodifiable reference to the key of element i in the list

	const V& value(int i) const {
		if (i >= 0 && i < N) { return v[i]; } //previously i <= 0
	}//- returns an unmodifiable reference to the value of element i in the list

	KVList& add(const K& kk, const V& vv) {
		if (count < N) { // if there is room left in the arrays

			k[count] = kk;
			v[count] = vv;
			count++; //increment current count of pairs after adding
		}
		return *this;
	} // - adds a new element to the list if room exists and returns a reference to the current object, does nothing if no room exists

	int find(const K& kk) const {
		for (size_t i = 0; i < count; i++) { //iterate through key array
			if (k[i] == kk) return i; //if there is a match from an array to incoming key return index
		}
		return 0;
	}// - returns the index of the first element in the list with a key equal to kk - defaults to 0

	KVList& replace(int i, const K& kk, const V& vv) {
		if (i >= 0 && i < count) { //previously <= 0
			k[i] = kk;
			v[i] = vv;
		}
		return *this;
	}// - replaces element i in the list with the key and value received and returns a reference to the current object

};//kvlist

  //Design and code a class template named KVList for managing lists of key - value pairs.
  //The classes generated by your template contain two parallel arrays of dimension N - 
  //a key array of type K and a value array of type V.K, V and N are template parameters,
  //which the programmer who uses your template can specify.Save your template in a header file named KVList.h.